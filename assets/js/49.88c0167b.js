(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{470:function(r,t,n){"use strict";n.r(t);var e=n(2),s=Object(e.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#springapplicationrunlistener"}},[r._v("SpringApplicationRunListener")])]),t("li",[t("a",{attrs:{href:"#beandefinitionregistrypostprocessor"}},[r._v("BeanDefinitionRegistryPostProcessor")])]),t("li",[t("a",{attrs:{href:"#beanfactorypostprocessor"}},[r._v("BeanFactoryPostProcessor")])])])]),r._v("\nSpringBoot在启动过程中留有很多生命周期函数和钩子函数，以方便开发者扩展其功能，本章我们就来整理一下他有哪些方法。"),t("p"),r._v(" "),t("h2",{attrs:{id:"springapplicationrunlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springapplicationrunlistener"}},[r._v("#")]),r._v(" SpringApplicationRunListener")]),r._v(" "),t("p",[r._v("该listener主要是监听SpringApplication的启动过程。包含以下函数：\n1、starting:开始启动时立即调用，可以做一些非常早初始操作\n2、environmentPrepared:环境已经准备好，但是应用上下文还没有生成\n3、contextPrepared:应用上下文已经生成并且准备好了，但是source(run方法传入的类)还没有加载\n4、contextLoaded:应用上下文的source已经加载，但是还没有刷新\n5、started:应用上下文已经刷新，应用已经运行了，但是CommandLineRunner和ApplicationRunner还未被调用\n6、running：CommandLineRunner等已经被调用了。\n7、failed：应用启动过程中报错时调用")]),r._v(" "),t("h2",{attrs:{id:"beandefinitionregistrypostprocessor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinitionregistrypostprocessor"}},[r._v("#")]),r._v(" BeanDefinitionRegistryPostProcessor")]),r._v(" "),t("p",[r._v("BeanDefinitionRegistryPostProcessor只有一个方法，那就是postProcessBeanDefinitionRegistry方法，该方法一般用来在BeanFactoryPostProcessor执行之前添加一些BeanFactoryPostProcessor。")]),r._v(" "),t("h2",{attrs:{id:"beanfactorypostprocessor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactorypostprocessor"}},[r._v("#")]),r._v(" BeanFactoryPostProcessor")]),r._v(" "),t("p",[r._v("该类只有一个方法postProcessBeanFactory。该方法用于在BeanFatory初始化之后，所有的Bean实例化之前做一些自定义操作")])])}),[],!1,null,null,null);t.default=s.exports}}]);