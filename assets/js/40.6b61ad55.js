(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{455:function(a,s,r){"use strict";r.r(s);var e=r(2),t=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul")]),a._v("\nredis的数据都是放在内存中，如果不想办法保存数据，那么，重启之后，数据都会丢失，为了解决这个问题，redis提供了RDB和AOF两种持久化方法来保存数据。"),s("p"),a._v(" "),s("h1",{attrs:{id:"rdb方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rdb方式"}},[a._v("#")]),a._v(" RDB方式")]),a._v(" "),s("p",[a._v("所谓的RDB方法就是将redis中的所有键值对和过期时间按照特定格式写入rdb文件中，可以通过save配置来让redis定时写rdb文件，redis通过dirty计数器（从lastsave开始，有多少修改）和lastsave（上次执行bgsave的时间）字段来判断是否满足执行bgsave的条件。")]),a._v(" "),s("h1",{attrs:{id:"aof方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aof方式"}},[a._v("#")]),a._v(" AOF方式")]),a._v(" "),s("p",[a._v("aof方式是通过记录redis所执行的写命令来记录数据库状态的。当redis开启AOF功能时，redis执行完一个写命令后，会以协议格式将该写命令追加到服务器状态的aof_buf中，然后在redis执行完本轮文件事件后，会将aof_buf中的信息写入aof文件，并根据配置信息选择是否同步到aof文件中。")]),a._v(" "),s("p",[a._v("aof文件重写，由于aof文件是通过记录命令的形式保存，随着时间的推移，文件会越来越大，这个时候redis就要在后台执行aof文件重写功能，aof文件重写是直接读取redis中的键值对，将他们转化成redis命令存到新aof文件中，由于该过程需要耗费一定时间，那么在重写的过程中，redis的内容可能又发生了变化，为了解决这个问题，redis引入了aof重写缓冲区，在aof重写期间，当redis服务器处理写命令时，它的步骤大致如下：")]),a._v(" "),s("ol",[s("li",[a._v("执行客户端发来的命令")]),a._v(" "),s("li",[a._v("将执行的写命令追加到aof缓冲区")]),a._v(" "),s("li",[a._v("将执行的写命令追加到aof重写缓冲区\n当子进程完成重写aof文件工作后，通知主进程，主进程将aof重写缓冲区的命令写入新的aof文件中，并原子的用新aof文件替换旧aof文件。")])]),a._v(" "),s("p",[a._v("为什么重写时用子进程而不是子线程，是因为子进程保有主进程的数据副本，可以避免使用锁的情况下，保证数据安全性。")])])}),[],!1,null,null,null);s.default=t.exports}}]);