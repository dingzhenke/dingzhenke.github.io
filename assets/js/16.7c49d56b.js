(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{420:function(r,e,t){r.exports=t.p+"assets/img/environment.25df8d61.png"},461:function(r,e,t){"use strict";t.r(e);var o=t(2),s=Object(o.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#概述"}},[r._v("概述")]),e("ul",[e("li",[e("a",{attrs:{href:"#profile"}},[r._v("profile")])]),e("li",[e("a",{attrs:{href:"#properties"}},[r._v("properties")])])])])])]),e("p"),r._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[r._v("#")]),r._v(" 概述")]),r._v(" "),e("p",[r._v("Environment是当前应用运行环境的抽象，包含运行环境的两个方面，profiles和properties。")]),r._v(" "),e("h3",{attrs:{id:"profile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#profile"}},[r._v("#")]),r._v(" profile")]),r._v(" "),e("p",[r._v("应用可以根据不同的profile加载不同的bean，当前的profile可以通过getActiveProfiles获取。")]),r._v(" "),e("h3",{attrs:{id:"properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[r._v("#")]),r._v(" properties")]),r._v(" "),e("p",[r._v("配置属性在所有应用中都扮演重要角色，而且有多种方法可以设置配置属性，比如：properties文件，JVM系统properties，系统环境变量，JNDI，Servlet context parameters等等。environment对象提供给用户一个便捷的服务接口用于配置配置源以及从配置源中获取配置。")]),r._v(" "),e("p",[r._v("Environment的实现涉及到很多的概念，先大概讲解一下部分接口：\n1、PropertyResolver：提供从配置源中获取指定配置项的接口，以及解析占位符对应的配置，Environment继承该接口\n2、ConverterRegistry：类型转换注册中心，用于注册各种类型转换器\n3、ConversionService：提供类型转换服务。\n4、PropertySource:抽象类，表示包含一组键值对的源，它将真实的配置源对象封装起来，提供一个统一的访问接口，该对象一般不单独使用，而是通过一个PropertySources对象，PropertySources对象整合多个配置源（PropertySource），并提供优先级访问")]),r._v(" "),e("p",[r._v("关于Environment的解析先就到这里，等解析完启动过程，我们再回过头来看看SpringBoot是如何将配置注入到属性值中的。最后附上一副类图：\n"),e("img",{attrs:{src:t(420),alt:"ConfigurableEnvironment"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);