(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{469:function(t,e,n){"use strict";n.r(e);var s=n(2),o=Object(s.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul")]),this._v("\n沿着SpringContext的run方法，我们来到了ApplicationContext的refesh方法，这个方法设计的内容有很多，不过我们还是和前面一样，一步一步来分析，代码如下："),t("p"),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("    @Override\n\tpublic void refresh() throws BeansException, IllegalStateException {\n\t\tsynchronized (this.startupShutdownMonitor) {\n\t\t\t// Prepare this context for refreshing.\n\t\t\tprepareRefresh();\n\n\t\t\t// Tell the subclass to refresh the internal bean factory.\n\t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n\t\t\t// Prepare the bean factory for use in this context.\n\t\t\tprepareBeanFactory(beanFactory);\n\n\t\t\t......\n\n\t\t\t// Allows post-processing of the bean factory in context subclasses.\n\t\t\tpostProcessBeanFactory(beanFactory);\n\n\t\t\t// Invoke factory processors registered as beans in the context.\n\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);\n\n\t\t\t// Register bean processors that intercept bean creation.\n\t\t\tregisterBeanPostProcessors(beanFactory);\n\n\t\t\t// Initialize message source for this context.\n\t\t\tinitMessageSource();\n\n\t\t\t// Initialize event multicaster for this context.\n\t\t\tinitApplicationEventMulticaster();\n\n\t\t\t// Initialize other special beans in specific context subclasses.\n\t\t\tonRefresh();\n\n\t\t\t// Check for listener beans and register them.\n\t\t\tregisterListeners();\n\n\t\t\t// Instantiate all remaining (non-lazy-init) singletons.\n\t\t\tfinishBeanFactoryInitialization(beanFactory);\n\n\t\t\t// Last step: publish corresponding event.\n\t\t\tfinishRefresh();\n\t\t\t......\n\t\t}\n\t}\n")])])]),t("p",[this._v("1、prepareRefresh()：主要是初始化PropertySource中的属性，比如解析占位符的我属性值，然后验证所有的属性都能被解析。\n2、obtainFreshBeanFactory：由于我们是AnnotationConfigApplicationContext，这里没有什么操作\n3、prepareBeanFactory：为BeanFactory设置标准上下文信息，比如ClassLoader和post-processors\n4、postProcessBeanFactory：由于我们是AnnotationConfigApplicationContext，这里没有什么操作\n5、invokeBeanFactoryPostProcessors：先后执行各种BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry和PostProcessor.postProcessBeanFactory方法，也就是在这里\n会调用ConfigurationClassPostProcessor从@Configuration注释的类中，引入其相关联的类\n6、registerBeanPostProcessors：顾名思义，注册BeanFactory中的所有BeanPostProcessors\n7、initMessageSource和initApplicationEventMulticaster：顾名思义，只是新建两个类。\n8、onRefresh():由于我们是AnnotationConfigApplicationContext，这里没有什么操作\n9、registerListeners：添加并注册所有的ApplicationListener\n10、finishBeanFactoryInitialization：初始化剩余的所有的单例bean\n11、finishRefresh：调用LifecycleProcessor的onRefresh和发送ContextRefreshedEvent事件")])])}),[],!1,null,null,null);e.default=o.exports}}]);