(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{421:function(t,n,i){t.exports=i.p+"assets/img/applicationContext.f6d84dbb.png"},462:function(t,n,i){"use strict";i.r(n);var e=i(2),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#概述"}},[t._v("概述")])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("p",[t._v("上节我们大致了解了Environment，沿着源代码往下，我们迎来了SpringBoot最核心的模块(ApplicationContext),这个模块涉及的类众多，我们以AnnotationConfigApplicationContext为例，看下它的类图：\n"),n("img",{attrs:{src:i(421),alt:"ApplicationContext"}})]),t._v(" "),n("p",[t._v("在后面的讲解中，我会去除一些非核心的模块，只讲一下几个子模块:")]),t._v(" "),n("ul",[n("li",[t._v("BeanFactory:Spring Bean的容器类，负责注册和管理bean。可以说是最核心的功能都在这里")]),t._v(" "),n("li",[t._v("ResourceLoader：加载资源的策略接口（对应于策略模式的接口）")]),t._v(" "),n("li",[t._v("BeanDefinitionRegistry：BeanDefinition注册机，用于注册管理BeanDefinition")])])])}),[],!1,null,null,null);n.default=a.exports}}]);