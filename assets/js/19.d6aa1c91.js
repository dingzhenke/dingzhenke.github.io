(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{432:function(e,t,a){"use strict";a.r(t);var s=a(2),l=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#nio概览"}},[e._v("NIO概览")]),t("ul",[t("li",[t("a",{attrs:{href:"#channel"}},[e._v("channel")])]),t("li",[t("a",{attrs:{href:"#buffer"}},[e._v("buffer")])]),t("li",[t("a",{attrs:{href:"#selector"}},[e._v("selector")])])])]),t("li",[t("a",{attrs:{href:"#java-nio-连接管理"}},[e._v("JAVA NIO 连接管理")]),t("ul",[t("li",[t("a",{attrs:{href:"#interestset"}},[e._v("interestSet")])]),t("li",[t("a",{attrs:{href:"#selectedkeys"}},[e._v("selectedKeys()")])])])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"nio概览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nio概览"}},[e._v("#")]),e._v(" NIO概览")]),e._v(" "),t("p",[e._v("JAVA NIO中主要由selector、buffer和channel构成。")]),e._v(" "),t("h3",{attrs:{id:"channel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#channel"}},[e._v("#")]),e._v(" channel")]),e._v(" "),t("p",[e._v("即通道，代表一条到对应设备的连接。可以对一个channel同时进行读和写操作。程序只能通过buffer和channel进行数据交换。")]),e._v(" "),t("h3",{attrs:{id:"buffer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#buffer"}},[e._v("#")]),e._v(" buffer")]),e._v(" "),t("p",[e._v("可作为应用程序和IO设备交换数据的媒介")]),e._v(" "),t("h3",{attrs:{id:"selector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#selector"}},[e._v("#")]),e._v(" selector")]),e._v(" "),t("p",[e._v("selector 检查一个或者多个channel，判断哪些channel准备好了进行读写操作。一个selector可以管理多个channel。")]),e._v(" "),t("h2",{attrs:{id:"java-nio-连接管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-nio-连接管理"}},[e._v("#")]),e._v(" JAVA NIO 连接管理")]),e._v(" "),t("p",[e._v("连接管理分为以下几个步骤:")]),e._v(" "),t("ol",[t("li",[e._v("创建一个selector")]),e._v(" "),t("li",[e._v("注册channels到selector,并指明channel的interestSet")]),e._v(" "),t("li",[e._v("调用selector的select系列方法查询就绪的channels")]),e._v(" "),t("li",[e._v("如果有就绪的channel，则调用selector的selectedKeys()方法获取就绪channel的相关数据")])]),e._v(" "),t("h3",{attrs:{id:"interestset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interestset"}},[e._v("#")]),e._v(" interestSet")]),e._v(" "),t("p",[e._v("第二步里面有个interestSet，表示你对通过selector监听channel的哪些事件感兴趣。这些事件有以下四种类型：")]),e._v(" "),t("ul",[t("li",[e._v("连接")]),e._v(" "),t("li",[e._v("收到连接")]),e._v(" "),t("li",[e._v("读")]),e._v(" "),t("li",[e._v("写")])]),e._v(" "),t("p",[e._v("上面的四种事件类型对应了SelectionKey的四个常量：")]),e._v(" "),t("ul",[t("li",[e._v("SelectionKey.OP_CONNECT")]),e._v(" "),t("li",[e._v("SelectionKey.OP_ACCEPT")]),e._v(" "),t("li",[e._v("SelectionKey.OP_READ")]),e._v(" "),t("li",[e._v("SelectionKey.OP_WRITE")])]),e._v(" "),t("p",[e._v("如果你不止对一个事件感兴趣，你可以使用OR操作，就像这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;  \n")])])]),t("h3",{attrs:{id:"selectedkeys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#selectedkeys"}},[e._v("#")]),e._v(" selectedKeys()")]),e._v(" "),t("p",[e._v("第四步中，你通过调用selectedKeys()方法获取这些就绪的channel，该方法的返回值是一个SelectionKey列表，这个SelectionKey对象包含一些有趣的属性:")]),e._v(" "),t("ul",[t("li",[e._v("感兴趣事件集")]),e._v(" "),t("li",[e._v("就绪事件集")]),e._v(" "),t("li",[e._v("附加对象(可选)")])]),e._v(" "),t("p",[e._v("其中就绪事件集表示该channel已经准备好了的事件集合，当selector执行一轮查询后，你可以通过SelectionKey.readyOps()方法获取就绪事件集，就像这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("int readySet = selectionKey.readyOps();\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);